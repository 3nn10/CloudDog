############################################
#This is the configuration file of CloudDog# I
############################################
#This program is a free software; you can redistribute it and/or modify it under the terms of GPLv2.
regions_nacl:                     #insert region list to monitor and the relative network acl id to block and attack, network_acl_id it is mandatory only if at least one block option is active
  - region: eu-central-1          #Insert Regions to monitor
    network_acl_id:
      - acl-xxxxxxxx  #insert the network acls id where to implement blocks, you can put multiple acl
  # - region: eu-central-1
  #   network_acl_id: acl-xxxxxxxx

###Webserver protection###
apache_nginx_log:
  active: True                   # True or False
  log_group: CloudDogWebsites    # Modify according to your logGroup, supported webservers:Apache2,Nginx
  time_window: 5                # Insert the window time to check in minutes, if you modify this value after install you have to modify also the crontab, only first 10000 events are analyzed
  html_status:
    active: False                # True only if you have a fast processor
    treshold: 100                # set the treshold about http status
    html_status_to_check:        # html status that can be related to an attack (or misconfiguration)
      - 400                      # bad request
      - 401                      # Unauthorized
      - 403                      # Forbidden
      - 404                      # Not Found
      - 408                      # Request timeout
      - 500                      # Internal Service Error
      - 501                      # Not Implemented
      - 503                      # Service Unavailable
  ipWhitelist:            # ip whitelist (Whitelisted ip are not even logged), insert whitelist in CIDR
    #- 8.8.8.8/32
  block:
    active: True                 # if you want block attackers from the ec2, it is better to block with lambda rules.
    treshold_Total_Attacks: 10   # number of total attacks before an Ip is blocked
    treshold_Different_Attack: 3 # number of different attacks before an Ip is blocked
    treshold_operator: and       # put 'and' if both treshold_Total_Attacks treshold_Different_Attack must be satisfied to block an ip, put 'or' if one condition is enough
    dedicated_nacl_RuleNumber_min: 1 # number of rules that can be used to block Ip, when the dedicated_nacl_number_max is reached the rules will be reused. # this means that the script is able to block maximum (dedicated_nacl_number_max - dedicated_nacl_number_max) ip for every time windows
    dedicated_nacl_RuleNumber_max: 9

###Bruteforce and privilege escalation protection###
linux_authorization_log:
  active: True
  log_group: CloudDogAuth       # Insert the group of log of /var/log/auth.log
  treshold: 20              # Insert the number of wrong tentatives to consider a bruteforce
  time_window: 5            # Insert the window time to check in minutes, if you modify this value after install you have to modify also the crontab
  ipWhitelist:              # ip whitelist (Whitelisted ip are not even logged)
    #- 8.8.8.8/32
  block:
    active: True            # If you want to block ip are doing ssh bruteforce
    only_successeful: False # True to block only the ip that made a bruteforce and after made a successeful login, False to block every ip made a bruteforce
    dedicated_nacl_RuleNumber_min: 10 # number of rules that can be used to block Ip, when the dedicated_nacl_number_max is reached the rules will be reused.
    dedicated_nacl_RuleNumber_max: 18

###Suspicious commands protection###
linux_bash_command_history:      # make this command in all linux ec2 monitored insert "PROMPT_COMMAND='history -a'" in ~/.profile or the monitoring is not very effective
  active: True
  log_group: CloudDog_bash_history    # Modify the log group of the command_history
  time_window: 10                # Insert the window time to check in minutes, if you modify this value after install you have to modify also the crontab
  egressDomainWhitelist:         # whitelist for contacted ip with wget, curl, nc, netcat, Lync, nmap
    # - google.com
  ipWhitelist:            # whitelist for contacted ip with wget, curl, nc, netcat, Lync, nmap
    # - 8.8.8.8/32
    
  block:
    active: True            # If you want to block ip in egress nacl
    only_ip: False           # True to block only ip that are written directly and not resolved domain
    dedicated_nacl_RuleNumber_min: 1  # number of rules that can be used to block Ip, when the dedicated_nacl_number_max is reached the rules will be reused.
    dedicated_nacl_RuleNumber_max: 18
